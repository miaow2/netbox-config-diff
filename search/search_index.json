{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":""},{"location":"#collecting-diffs","title":"Collecting diffs","text":"<p>With this plugin you can find diff between the rendered configuration for a device to its actual configuration, retrieved from the device itself, or stored in DataSource. Read about DataSources for further details.</p> <p>Device configuration renders natively in NetBox. This feature was introduced in 3.5 version.  NetBox Labs blog post about it.</p> <p>Plugin supports a wide list of vendors (Cisco, Juniper, Huawei, MicroTik etc.) with the help of Scrapli. Read Scrapli and scrapli-community documentations to find full list of vendors.</p>"},{"location":"#pushing-configuration","title":"Pushing configuration","text":"<p>Also you can push rendered configuration from NetBox to device and apply it.</p> <p>Supported platforms:</p> <ul> <li><code>arista_eos</code></li> <li><code>cisco_iosxe</code></li> <li><code>cisco_iosxr</code></li> <li><code>cisco_nxos</code></li> <li><code>juniper_junos</code></li> </ul> <p>This is possible thanks to the scrapli_cfg. Read Scrapli documentation for more info.</p>"},{"location":"#installing","title":"Installing","text":"<p>For adding to a NetBox Docker setup see the general instructions for using netbox-docker with plugins.</p> <p>Install with pip:</p> <pre><code>pip install netbox-config-diff\n</code></pre> <p>Add to <code>local_requirements.txt</code>:</p> <pre><code>echo netbox-config-diff &gt;&gt; local_requirements.txt\n</code></pre> <p>Enable the plugin in <code>/opt/netbox/netbox/netbox/configuration.py</code>,  or if you use netbox-docker, your <code>/configuration/plugins.py</code> file,  and define credentials for devices connection:</p> <pre><code>PLUGINS = [\n    \"netbox_config_diff\",\n]\n\nPLUGINS_CONFIG = {\n    \"netbox_config_diff\": {\n        \"USERNAME\": \"foo\",\n        \"PASSWORD\": \"bar\",\n        \"AUTH_SECONDARY\": \"foobar\",  # define here password for accessing Privileged EXEC mode, this variable is optional\n    },\n}\n</code></pre> <p>Run database migrations:</p> <pre><code>python manage.py migrate\n\n</code></pre> <p>Collect static from the plugin:</p> <pre><code>python manage.py collectstatic --noinput\n</code></pre> <p>Restart NetBox service:</p> <pre><code>systemctl restart netbox netbox-rq\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Read this doc about collecting diffs, for configuration management read this</p>"},{"location":"#video","title":"Video","text":"<p>My presention about plugin at October NetBox community call (19.10.2023, plugin version 2.0.0).</p> <p></p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#280-2024-11-10","title":"2.8.0 (2024-11-10)","text":"<ul> <li>#76 Add in NetBox 4.0 and higher some statistics for diff</li> <li>#81 Fix error in rendering config with several substitutes</li> <li>#84 Strip multiple empty lines in configs</li> </ul>"},{"location":"changelog/#270-2024-09-29","title":"2.7.0 (2024-09-29)","text":"<ul> <li>#79 Add support for NetBox 4.1</li> </ul> <p>This release drops support for NetBox 3.6.</p>"},{"location":"changelog/#260-2024-07-14","title":"2.6.0 (2024-07-14)","text":"<ul> <li>#62 Add support for NetBox 4.0</li> </ul> <p>This release drops support for NetBox 3.5.</p>"},{"location":"changelog/#250-2024-06-30","title":"2.5.0 (2024-06-30)","text":"<ul> <li>#67 Add option <code>default_desired_privilege_level</code> to plugins variables (thanks to @cknost)</li> <li>#69 Fix logger in SecretsMixin</li> <li>#70 Add <code>escapejs</code> filter to diff templates</li> </ul>"},{"location":"changelog/#240-2024-05-12","title":"2.4.0 (2024-05-12)","text":"<ul> <li>#63 Generate patch commands necessary to bring a device into its intended configuration with hier_config</li> </ul>"},{"location":"changelog/#230-2024-04-11","title":"2.3.0 (2024-04-11)","text":"<ul> <li>#49 Handle junipers templates with set commands</li> <li>#56 Add support for NetBox 3.7</li> <li>#57 Reverse columns in compliance diff</li> </ul>"},{"location":"changelog/#220-2024-02-06","title":"2.2.0 (2024-02-06)","text":"<ul> <li>#47 Move plugin to separete menu item in navbar and add tab for devices with compliance result</li> <li>#50 Add template field for device name in DataSource to ConfigDiffScript</li> <li>#53 Add netbox-rq to installation process docs</li> </ul>"},{"location":"changelog/#210-2023-10-26","title":"2.1.0 (2023-10-26)","text":"<ul> <li>#35 Add ability to define password for accessing priviliged exec mode</li> <li>#37 Add <code>DeviceRole</code> field to <code>CollectDiffScript</code></li> <li>#38 Remove config template filter for devices filed in forms</li> <li>#39 Add <code>Status</code> field to <code>CollectDiffScript</code></li> <li>#43 <code>ConfigDiffScript</code> does not create empty changelog entries</li> </ul>"},{"location":"changelog/#201-2023-10-22","title":"2.0.1 (2023-10-22)","text":"<ul> <li>#33 Fix failing migrations on fresh database install</li> </ul>"},{"location":"changelog/#200-2023-10-18","title":"2.0.0 (2023-10-18)","text":"<ul> <li>#25 Add configuration management</li> </ul>"},{"location":"changelog/#122-2023-09-29","title":"1.2.2 (2023-09-29)","text":"<ul> <li>#28 Add legacy ssh algorithms to support old OS versions</li> </ul>"},{"location":"changelog/#121-2023-09-07","title":"1.2.1 (2023-09-07)","text":"<ul> <li>#26 Add dark theme for diff</li> </ul>"},{"location":"changelog/#120-2023-08-23","title":"1.2.0 (2023-08-23)","text":"<ul> <li>#20 Add integration with netbox-secrets plugin</li> </ul>"},{"location":"changelog/#111-2023-08-13","title":"1.1.1 (2023-08-13)","text":"<ul> <li>#1 Add tests</li> </ul>"},{"location":"changelog/#110-2023-08-01","title":"1.1.0 (2023-08-01)","text":"<ul> <li>#16 Add missing and extra config lines</li> </ul>"},{"location":"changelog/#100-2023-07-23","title":"1.0.0 (2023-07-23)","text":"<ul> <li>Publish on PyPI.</li> </ul>"},{"location":"changelog/#011-2023-07-23","title":"0.1.1 (2023-07-23)","text":"<ul> <li>Add DataSoures as sources for device configurations.</li> <li>Add docs.</li> </ul>"},{"location":"changelog/#010-2023-07-09","title":"0.1.0 (2023-07-09)","text":"<ul> <li>First release.</li> </ul>"},{"location":"colliecting-diffs/","title":"Usage","text":"<p>In navbar serach for <code>Config Diff Plugin</code> menu</p> <p></p>"},{"location":"colliecting-diffs/#platformsetting","title":"PlatformSetting","text":"<p>Add PlatformSetting objects for your platforms in NetBox. This model contains info about how to connect and what to collect from device.</p> <p>Define:</p> <ul> <li>Driver for Scrapli, you can find all drivers in Scrapli and Scrapli community documentation.</li> <li>Command to collect configuration</li> <li>Optional regex patterns to exclude from actual config, specify each pattern on a new line</li> </ul> <p>With regexps you can exclude big parts of the configuration and compare tiny configuration pieces (only ntp configuration).</p> <p>You can test regexp on the site regex101.com.</p> <p></p>"},{"location":"colliecting-diffs/#script","title":"Script","text":"<p>Plugin adds a custom script <code>ConfigDiffScript</code> that runs all logic about diff calculations and connections to devices. You can find scripts list in navbar <code>Customization -&gt; Scripts</code>.</p> <p></p> <p>In the script, you can define a site or role, on which devices run compliance, or devices.  If you define all fields, script will run only on devices from <code>Devices</code> field</p> <p>Warning</p> <p>Script runs only on devices with assigned Primary IP, Platform and PlatformSetting</p> <p>If you have configs in NetBox DataSource, you can define it, the script instead of connecting to devices will find configs in DataSource by device's names.</p> <p>Warning</p> <p>Be sure that DataSource is synced and has the latest data</p> <p>Note</p> <p>Only synced DataSources are acceptable</p> <p>Note</p> <p>Diff replaces sequences of 3 or more empty lines with one empty line</p> <p>If in your DataSource config names are different from the hostnames of the devices, you can specify config name with Jinja2 template in <code>Name template</code> field.  Reference device with <code>{{ object }}</code> variable.</p> <p>For example, config name is virtual chassis name plus <code>config</code> (<code>switchname-config</code>) and your devices names are <code>switchname1</code>, <code>switchname2</code> and etc.</p> <p>You can define Jinja2 template with logic to use virtual chassis name if device is in chassis, else use device name:</p> <pre><code>{% if object.virtual_chassis %}{{ object.virtual_chassis.name }}-config{% else %}{{ object.name }}{% endif %}\n</code></pre> <p>Also you can define custom field which stores actual configuration of devices.</p> <p></p>"},{"location":"colliecting-diffs/#results","title":"Results","text":"<p>After script is done you can find results in <code>Config Compliances</code> menu. Each device has its own result.</p> <p></p> <p>Also result is storing rendered and actual configurations from devices.</p> <p>Compliance finished with error</p> <p></p> <p>Render diff between configurations</p> <p></p> <p>No diff</p> <p></p>"},{"location":"colliecting-diffs/#patch-commands","title":"Patch commands","text":"<p>With hier_config library you are able to take a actual configuration of a network device, compare it to its rendered configuration,  and build the remediation steps necessary to bring a device into spec with its intended configuration.</p> <p></p> <p>Supported platforms:</p> <ul> <li>Arista EOS (arista_eos)</li> <li>Cisco IOS-XE (cisco_iosxe)</li> <li>Cisco IOS-XR (cisco_iosxr)</li> <li>Cisco NX-OS (cisco_nxos)</li> </ul> <p>However, any NOS that utilizes a CLI syntax that is structured in a similar fasion to IOS should work mostly out of the box.</p> <p>NOS's that utilize a <code>set</code> based CLI syntax has been added as experimental functionality:</p> <ul> <li>Juniper JunOS (juniper_junos)</li> <li>VyOS (vyos_vyos)</li> </ul>"},{"location":"colliecting-diffs/#missingextra","title":"Missing/extra","text":"<p>With the help of netutils library plugin stores missing and extra config lines.</p> <p></p> <p>Supported platforms for missing/extra lines:</p> <ul> <li>Arista EOS (arista_eos)</li> <li>Aruba AOSCX (aruba_aoscx)</li> <li>Cisco AireOS (cisco_aireos)</li> <li>Cisco ASA (cisco_asa)</li> <li>Cisco IOS-XE (cisco_iosxe)</li> <li>Cisco IOS-XR (cisco_iosxr)</li> <li>Cisco NX-OS (cisco_nxos)</li> <li>Juniper JunOS (juniper_junos)</li> <li>Mikrotik RouterOS (mikrotik_routeros)</li> <li>Nokia SROS (nokia_sros)</li> <li>PaloAlto PanOS (paloalto_panos)</li> <li>Ruckus FastIron (ruckus_fastiron)</li> </ul>"},{"location":"configuratiom-management/","title":"Usage","text":"<p>With plugin you can push rendered configuration from NetBox to devices.</p> <p>Supported platforms:</p> <ul> <li><code>arista_eos</code></li> <li><code>cisco_iosxe</code></li> <li><code>cisco_iosxr</code></li> <li><code>cisco_nxos</code></li> <li><code>juniper_junos</code></li> </ul> <p>Plugin using scrapli-cfg for this feature.</p> <p>Warning</p> <p>If you use Juniper and render config in set commands, please read next info. Plugin uses <code>load override</code> command to load config to a device, set commands load with <code>load set</code>. With <code>load set</code> commnad you can't replace all config, because this command uses <code>merge</code> action. So, please, be careful when using set commands in rendering config and pushig it with plugin, it can have unexpected side effects.</p>"},{"location":"configuratiom-management/#substitutes","title":"Substitutes","text":"<p>If you render not full configuration, it is acceptable to pull missing config sections from the actual configuration to render full configuration.</p> <p>Note</p> <p>If you render full configuration in NetBox, you can proceed to <code>Configuration Request</code> part</p> <p>To do that you should create substitute.</p> <p>Substitutes is a \"tag\" that needs to be replaced with output from the real device, and a regex pattern that \"pulls\" this section from the actual device itself.</p> <p></p> <p>In screenshot below we add substitute for Arista PlatformSetting</p> <ul> <li>Name is a \"tag\", you should put this as jinja2 variable in your config template in NetBox</li> <li>Regexp is a regex, that \"pulls\" what matched from device and replace <code>Name</code> jinja2 variable in config template</li> </ul> <p>In example substitute <code>ethernet_interfaces</code> section will be replaced with whatever the provided pattern finds from the real device.</p> <p>This pattern matches all ethernet interfaces on a Arista device.</p> <p>To correctly render substitute in config template you have two options:</p> <pre><code>{{ \"{{ ethernet_interfaces }}\" }}\n</code></pre> <p>or</p> <pre><code>{% raw %}{{ ethernet_interfaces }}{% endraw %}\n</code></pre> <p>Config template will look like:</p> <p></p> <p>And rendered config template with substitute</p> <p></p>"},{"location":"configuratiom-management/#configuration-request","title":"Configuration Request","text":"<p>Now you let's create <code>Configuration Request</code> with devices you want to configure.</p> <p>Warning</p> <p>For request only accepts devices with <code>Active</code> status and assigned Platform, Primary IP, and PlatformSetting</p> <p>Find <code>Configuration Requests</code> in navbar.</p> <p>Now collect diffs for devices pressing <code>Collecting diffs</code> button.</p> <p></p> <p>On tab <code>Diffs</code> you can review diffs for devices.</p> <p></p> <p>To continue approve request by pressing <code>Approve</code> button.</p> <p></p> <p>Also you can cancel approve after that.</p> <p></p> <p>After approval you can see by whom configuration request is approved.</p> <p></p> <p>At this moment you can schedule job that will push rendered configuration to devices in configuration request by pressing schedule button.</p> <p></p> <p>After that you can see by whom configuration request is scheduled and time.</p> <p></p> <p>Also you can cancel scheduled job by pressing <code>Unschedule</code> button.</p> <p></p> <p>Warning</p> <p>Approve and Schedule buttons is accessable only to user with <code>netbox_config_diff.approve_configurationrequest</code> permission</p> <p>Warning</p> <p>If you unapprove scheduled configuration request, scheduled job will be canceled</p> <p>After scheduled job is completed you can job logs on configuration request page.</p> <p></p> <p>Note</p> <p>Completed configuration requests can't be edited.</p>"},{"location":"configuratiom-management/#rollback","title":"Rollback","text":"<p>If an error occurs while executing a job that pushes configurations to devices then all configured devices will be rollbacked to the previous version of the configuration.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/miaow2/netbox-config-diff/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>NetBox Config Diff Plugin could always use more documentation, whether as part of the official NetBox Config Diff Plugin docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/miaow2/netbox-config-diff/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>netbox-config-diff</code> for local development.</p> <ol> <li>Fork the <code>netbox-config-diff</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <p><code>$ git clone git@github.com:your_name_here/netbox-config-diff.git</code></p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <p><code>$ poetry install -E test -E doc -E dev</code></p> </li> <li> <p>Create a branch for local development:</p> <p><code>$ git checkout -b name-of-your-bugfix-or-feature</code></p> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <p><code>$ poetry run tox</code></p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <p><code>$ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature</code></p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9 and 3.10. Check    https://github.com/miaow2/netbox-config-diff/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"screenshots/","title":"Screenshots","text":"<p>Also result is storing rendered and actual configurations from device.</p> <p>Compliance finished with error</p> <p></p> <p>Render diff between configurations</p> <p></p> <p>No diff</p> <p></p>"},{"location":"secrets/","title":"Integration with NetBox secrets plugin","text":"<p>You can store credentials for devices authentification in NetBox secrets plugin.  Read NetBox secrets docs for more info.</p> <p>In plugin variables define secrets roles for username (<code>USER_SECRET_ROLE</code>), password (<code>PASSWORD_SECRET_ROLE</code>) and  password (<code>SECOND_AUTH_SECRET_ROLE</code>) for Privileged EXEC mode.</p> <p>Default values for this variables are:</p> <pre><code>PLUGINS_CONFIG = {\n    \"netbox_config_diff\": {\n        \"USER_SECRET_ROLE\": \"Username\",\n        \"PASSWORD_SECRET_ROLE\": \"Password\",\n        \"SECOND_AUTH_SECRET_ROLE\": \"Second Auth\",\n    },\n}\n</code></pre> <p>Script will find secrets with these roles attached to the device and use them as credentials.</p> <p>Also you can define secret role for desired privilege level in plugins variable <code>DEFAULT_DESIRED_PRIVILEGE_LEVEL_ROLE</code>  or can specify the desired privilege level itself in variable <code>DEFAULT_DESIRED_PRIVILEGE_LEVEL</code>.</p> <p>If something goes wrong, then credentials from <code>PLUGINS_CONFIG</code> will be used.</p>"}]}